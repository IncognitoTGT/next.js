{
  "test/integration/amp-export-validation/test/index.test.js": {
    "passed": [],
    "failed": [
      "AMP Validation on Export production mode should have shown errors during build"
    ],
    "pending": [
      "AMP Validation on Export production mode shows AMP warning without throwing error",
      "AMP Validation on Export production mode shows warning and error when throwing error",
      "AMP Validation on Export production mode throws error on AMP error"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-document-style-fragment/test/index.test.js": {
    "passed": [],
    "failed": [
      "Custom Document Fragment Styles production mode correctly adds styles from fragment styles key"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/build-trace-extra-entries-turbo/test/index.test.js": {
    "passed": [],
    "failed": [
      "build trace with extra entries production mode should build and trace correctly"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/critical-css/test/index.test.js": {
    "passed": [],
    "failed": [
      "CSS optimization for SSR apps production mode should have all CSS files in manifest",
      "CSS optimization for SSR apps production mode should inline critical CSS",
      "CSS optimization for SSR apps production mode should inline critical CSS (dynamic)",
      "CSS optimization for SSR apps production mode should not inline non-critical css"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/custom-routes-i18n-index-redirect/test/index.test.js": {
    "passed": [
      "Custom routes i18n with index redirect development mode should respond to default locale redirects correctly for index redirect"
    ],
    "failed": [
      "Custom routes i18n with index redirect production mode should respond to default locale redirects correctly for index redirect"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/edge-runtime-streaming-error/test/index.test.ts": {
    "passed": ["development mode logs the error correctly"],
    "failed": ["production mode logs the error correctly"],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/externals-esm-loose/test/index.test.js": {
    "passed": [],
    "failed": [
      "Handle ESM externals with esmExternals: 'loose' production mode should render the ssg page",
      "Handle ESM externals with esmExternals: 'loose' production mode should render the ssr page",
      "Handle ESM externals with esmExternals: 'loose' production mode should render the static page"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/gsp-extension/test/index.test.js": {
    "passed": [],
    "failed": [
      "GS(S)P with file extension production mode should contain extension in name of json files in _next/data",
      "GS(S)P with file extension production mode should render properly for routes with extension",
      "GS(S)P with file extension production mode should support slug with different extensions"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/invalid-document-image-import/test/index.test.js": {
    "passed": [],
    "failed": [
      "Invalid static image import in _document production mode Should fail to build when disableStaticImages in next.config.js",
      "Invalid static image import in _document production mode Should fail to build when no next.config.js"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/middleware-prefetch/tests/index.test.js": {
    "passed": [],
    "failed": [
      "Middleware Production Prefetch production mode does not prefetch provided path if it will be rewritten",
      "Middleware Production Prefetch production mode prefetch correctly for unexistent routes"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/next-image-legacy/trailing-slash/test/index.test.ts": {
    "passed": [],
    "failed": [
      "Image Component Trailing Slash Tests development mode should include trailing slash when trailingSlash is set on config file during next dev",
      "Image Component Trailing Slash Tests production mode should include trailing slash when trailingSlash is set on config file during next start"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/next-image-new/react-virtualized/test/index.test.ts": {
    "passed": [],
    "failed": [
      "react-virtualized wrapping next/image production mode should not cancel requests for images"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": true
  },
  "test/integration/prerender-no-revalidate/test/index.test.js": {
    "passed": [],
    "failed": [
      "SSG Prerender No Revalidate production mode [/] should not revalidate /_next/data when set to false",
      "SSG Prerender No Revalidate production mode [/] should not revalidate when set to false",
      "SSG Prerender No Revalidate production mode [/named] should not revalidate /_next/data when set to false",
      "SSG Prerender No Revalidate production mode [/named] should not revalidate when set to false",
      "SSG Prerender No Revalidate production mode [/nested/named] should not revalidate /_next/data when set to false",
      "SSG Prerender No Revalidate production mode [/nested/named] should not revalidate when set to false",
      "SSG Prerender No Revalidate production mode [/nested] should not revalidate /_next/data when set to false",
      "SSG Prerender No Revalidate production mode [/nested] should not revalidate when set to false"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/render-error-on-top-level-error/without-get-initial-props/test/index.test.js": {
    "passed": [],
    "failed": ["Top Level Error production mode should render error page"],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/sharp-api/test/sharp-api.test.ts": {
    "passed": [],
    "failed": ["sharp api should handle custom sharp usage"],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/typescript-workspaces-paths/packages/www/test/index.test.js": {
    "passed": [
      "TypeScript Features default behavior should alias components",
      "TypeScript Features default behavior should resolve a single matching alias",
      "TypeScript Features default behavior should resolve the first item in the array first",
      "TypeScript Features default behavior should resolve the second item in as a fallback"
    ],
    "failed": [
      "TypeScript Features default behavior should not resolve to .d.ts files"
    ],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  }
}
