[workspace]
resolver = "2"

members = [
  "scripts/send-trace-to-jaeger",
  "crates/napi",
  "crates/wasm",
  "crates/next-api",
  "crates/next-build-test",
  "crates/next-build",
  "crates/next-core",
  "crates/next-custom-transforms",
  "turbopack/crates/*",
  "turbopack/xtask",
]

exclude = [
  "crates/next-error-code-swc-plugin",
]

[workspace.lints.clippy]
too_many_arguments = "allow"

# This crate is particularly sensitive to compiler optimizations
[profile.dev.package.turbo-tasks-memory]
opt-level = 1

# Set the options for dependencies (not crates in the workspace), this mostly impacts cold builds
[profile.dev.package."*"]
# This is a workaround for wasm timeout issue
debug-assertions = false
opt-level = 1

# Set the settings for build scripts and proc-macros.
[profile.dev.build-override]
opt-level = 3

[workspace.dependencies]
# Workspace crates
next-api = { path = "crates/next-api" }
next-build = { path = "crates/next-build" }
next-core = { path = "crates/next-core" }
next-custom-transforms = { path = "crates/next-custom-transforms" }

# Turbopack
auto-hash-map = { path = "turbopack/crates/turbo-tasks-auto-hash-map" }
swc-ast-explorer = { path = "turbopack/crates/turbopack-swc-ast-explorer" }
turbo-prehash = { path = "turbopack/crates/turbo-prehash" }
turbo-rcstr = { path = "turbopack/crates/turbo-rcstr" }
turbo-persistence = { path = "turbopack/crates/turbo-persistence" }
turbo-tasks-malloc = { path = "turbopack/crates/turbo-tasks-malloc", default-features = false }
turbo-tasks = { path = "turbopack/crates/turbo-tasks" }
turbo-tasks-backend = { path = "turbopack/crates/turbo-tasks-backend" }
turbo-tasks-build = { path = "turbopack/crates/turbo-tasks-build" }
turbo-tasks-bytes = { path = "turbopack/crates/turbo-tasks-bytes" }
turbo-tasks-env = { path = "turbopack/crates/turbo-tasks-env" }
turbo-tasks-fetch = { path = "turbopack/crates/turbo-tasks-fetch" }
turbo-tasks-fs = { path = "turbopack/crates/turbo-tasks-fs" }
turbo-tasks-hash = { path = "turbopack/crates/turbo-tasks-hash" }
turbo-tasks-macros = { path = "turbopack/crates/turbo-tasks-macros" }
turbo-tasks-macros-shared = { path = "turbopack/crates/turbo-tasks-macros-shared" }
turbo-tasks-macros-tests = { path = "turbopack/crates/turbo-tasks-macros-tests" }
turbo-tasks-memory = { path = "turbopack/crates/turbo-tasks-memory" }
turbo-tasks-testing = { path = "turbopack/crates/turbo-tasks-testing" }
turbopack = { path = "turbopack/crates/turbopack" }
turbopack-bench = { path = "turbopack/crates/turbopack-bench" }
turbopack-nodejs = { path = "turbopack/crates/turbopack-nodejs" }
turbopack-cli = { path = "turbopack/crates/turbopack-cli" }
turbopack-cli-utils = { path = "turbopack/crates/turbopack-cli-utils" }
turbopack-core = { path = "turbopack/crates/turbopack-core" }
turbopack-create-test-app = { path = "turbopack/crates/turbopack-create-test-app" }
turbopack-css = { path = "turbopack/crates/turbopack-css" }
turbopack-browser = { path = "turbopack/crates/turbopack-browser" }
turbopack-dev-server = { path = "turbopack/crates/turbopack-dev-server" }
turbopack-ecmascript = { path = "turbopack/crates/turbopack-ecmascript" }
turbopack-ecmascript-plugins = { path = "turbopack/crates/turbopack-ecmascript-plugins", default-features = false }
turbopack-ecmascript-runtime = { path = "turbopack/crates/turbopack-ecmascript-runtime" }
turbopack-ecmascript-hmr-protocol = { path = "turbopack/crates/turbopack-ecmascript-hmr-protocol" }
turbopack-env = { path = "turbopack/crates/turbopack-env" }
turbopack-image = { path = "turbopack/crates/turbopack-image" }
turbopack-json = { path = "turbopack/crates/turbopack-json" }
turbopack-mdx = { path = "turbopack/crates/turbopack-mdx" }
turbopack-node = { path = "turbopack/crates/turbopack-node" }
turbopack-resolve = { path = "turbopack/crates/turbopack-resolve" }
turbopack-static = { path = "turbopack/crates/turbopack-static" }
turbopack-swc-utils = { path = "turbopack/crates/turbopack-swc-utils" }
turbopack-test-utils = { path = "turbopack/crates/turbopack-test-utils" }
turbopack-tests = { path = "turbopack/crates/turbopack-tests" }
turbopack-trace-server = { path = "turbopack/crates/turbopack-trace-server" }
turbopack-trace-utils = { path = "turbopack/crates/turbopack-trace-utils" }
turbopack-wasm = { path = "turbopack/crates/turbopack-wasm" }

# SWC crates
swc_core = { version = "10.5.0", features = [
  "ecma_loader_lru",
  "ecma_loader_parking_lot",
] }
testing = { version = "5.0.0" }

# Keep consistent with preset_env_base through swc_core
browserslist-rs = { version = "0.17.0" }
miette = { version = "5.10.0", features = ["fancy"] }
mdxjs = "0.2.15"
modularize_imports = { version = "0.72.0" }
styled_components = { version = "0.100.1" }
styled_jsx = { version = "0.76.0" }
swc_emotion = { version = "0.76.0" }
swc_relay = { version = "0.46.1" }

# General Deps
chromiumoxide = { version = "0.5.4", features = [
  "tokio-runtime",
], default-features = false }
# For matching on errors from chromiumoxide. Keep in
# sync with chromiumoxide's tungstenite requirement.
tungstenite = "0.20.1"

# flate2_zlib requires zlib, use flate2_rust
allsorts = { version = "0.14.0", default-features = false, features = [
  "flate2_rust",
] }
anyhow = "1.0.69"
assert_cmd = "2.0.8"
async-compression = { version = "0.3.13", default-features = false, features = [
  "gzip",
  "tokio",
] }
async-trait = "0.1.64"
atty = "0.2.14"
bytes = "1.1.0"
chrono = "0.4.23"
clap = { version = "4.5.2", features = ["derive"] }
concurrent-queue = "2.5.0"
console = "0.15.5"
console-subscriber = "0.4.1"
criterion = "0.5.1"
crossbeam-channel = "0.5.8"
dashmap = "6.1.0"
dhat = { version = "0.3.2" }
dialoguer = "0.10.3"
dunce = "1.0.3"
either = "1.9.0"
futures = "0.3.26"
futures-retry = "0.6.0"
hashbrown = "0.14.5"
httpmock = { version = "0.6.8", default-features = false }
image = { version = "0.25.0", default-features = false }
indexmap = "2.7.1"
indicatif = "0.17.3"
indoc = "2.0.0"
itertools = "0.10.5"
lazy_static = "1.4.0"
log = "0.4.17"
lightningcss = { version = "1.0.0-alpha.63", features = [
  "serde",
  "visitor",
  "into_owned",
] }
lightningcss-napi = { version = "0.4.3", default-features = false, features = [
  "visitor"
]}
markdown = "1.0.0-alpha.18"
mime = "0.3.16"
nohash-hasher = "0.2.0"
notify = "6.1.1"
once_cell = "1.17.1"
owo-colors = "3.5.0"
parcel_selectors = "0.28.1"
parking_lot = "0.12.1"
pathdiff = "0.2.1"
petgraph = "0.6.3"
pin-project-lite = "0.2.9"
postcard = "1.0.4"
predicates = "2.1.5"
pretty_assertions = "1.3.0"
proc-macro2 = "1.0.79"
qstring = "0.7.2"
quote = "1.0.23"
rand = "0.8.5"
rayon = "1.10.0"
regex = "1.10.6"
reqwest = { version = "=0.11.17", default-features = false }
rstest = "0.16.0"
rustc-hash = "1.1.0"
semver = "1.0.16"
serde = { version = "1.0.152", features = ["derive"] }
serde_json = "1.0.93"
serde_bytes = "0.11.15"
serde_path_to_error = "0.1.9"
serde_qs = "0.11.0"
serde_with = "2.3.2"
serde_yaml = "0.9.17"
shadow-rs = { version = "0.37.0", default-features = false, features = [
  "tzdb",
] }
smallvec = { version = "1.13.1", features = [
  "serde",
  "const_generics",
  "union",
  "const_new",
] }
sourcemap = "9.0.0"
strsim = "0.11.1"
syn = "1.0.107"
tempfile = "3.3.0"
thread_local = "1.1.8"
thiserror = "1.0.48"
tiny-gradient = "0.1.0"
tokio = "1.25.0"
tokio-util = { version = "0.7.11", features = ["io", "rt"] }
tracing = "0.1.37"
tracing-subscriber = "0.3.16"
triomphe = { git = "https://github.com/sokra/triomphe", branch = "sokra/unstable" }
unicode-segmentation = "1.10.1"
unsize = "1.1.0"
url = "2.2.2"
urlencoding = "2.1.2"
webbrowser = "0.8.7"

[patch.crates-io]
sourcemap = { git = "https://github.com/wbinnssmith/rust-sourcemap", branch = "wbinnssmith/ignore-list" }
# Remove this once https://github.com/wasmerio/wasmer/pull/5333 is merged and released
wasmer = { git = "https://github.com/kdy1/wasmer", branch = "build-deps" }
wasmer-cache = { git = "https://github.com/kdy1/wasmer", branch = "build-deps" }
wasmer-compiler-cranelift = { git = "https://github.com/kdy1/wasmer", branch = "build-deps" }
wasmer-wasix = { git = "https://github.com/kdy1/wasmer", branch = "build-deps" }


ast_node = { git = 'https://github.com/swc-project/swc' }
better_scoped_tls = {git = 'https://github.com/swc-project/swc' }
binding_macros = { git = 'https://github.com/swc-project/swc' }
dbg-swc = { git = 'https://github.com/swc-project/swc' }
from_variant = { git = 'https://github.com/swc-project/swc' }
generate-code = { git = 'https://github.com/swc-project/swc' }
jsdoc = { git = 'https://github.com/swc-project/swc' }
preset_env_base = { git = 'https://github.com/swc-project/swc' }
string_enum = { git = 'https://github.com/swc-project/swc' }
swc = { git = 'https://github.com/swc-project/swc' }
swc-releaser = { git = 'https://github.com/swc-project/swc' }
swc_allocator = { git = 'https://github.com/swc-project/swc' }
swc_atoms = { git = 'https://github.com/swc-project/swc' }
swc_bundler = { git = 'https://github.com/swc-project/swc' }
swc_cached = { git = 'https://github.com/swc-project/swc' }
swc_cli_impl = { git = 'https://github.com/swc-project/swc' }
swc_common = { git = 'https://github.com/swc-project/swc' }
swc_compiler_base = { git = 'https://github.com/swc-project/swc' }
swc_config = { git = 'https://github.com/swc-project/swc' }
swc_config_macro = { git = 'https://github.com/swc-project/swc' }
swc_core = { git = 'https://github.com/swc-project/swc' }
swc_css = { git = 'https://github.com/swc-project/swc' }
swc_css_ast = { git = 'https://github.com/swc-project/swc' }
swc_css_codegen = { git = 'https://github.com/swc-project/swc' }
swc_css_codegen_macros = { git = 'https://github.com/swc-project/swc' }
swc_css_compat = { git = 'https://github.com/swc-project/swc' }
swc_css_lints = { git = 'https://github.com/swc-project/swc' }
swc_css_minifier = { git = 'https://github.com/swc-project/swc' }
swc_css_modules = { git = 'https://github.com/swc-project/swc' }
swc_css_parser = { git = 'https://github.com/swc-project/swc' }
swc_css_prefixer = { git = 'https://github.com/swc-project/swc' }
swc_css_utils = { git = 'https://github.com/swc-project/swc' }
swc_css_visit = { git = 'https://github.com/swc-project/swc' }
swc_ecma_ast = { git = 'https://github.com/swc-project/swc' }
swc_ecma_codegen = { git = 'https://github.com/swc-project/swc' }
swc_ecma_codegen_macros = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_bugfixes = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_common = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es2015 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es2016 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es2017 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es2018 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es2019 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es2020 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es2021 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es2022 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_compat_es3 = { git = 'https://github.com/swc-project/swc' }
swc_ecma_ext_transforms = { git = 'https://github.com/swc-project/swc' }
swc_ecma_lints = { git = 'https://github.com/swc-project/swc' }
swc_ecma_loader = { git = 'https://github.com/swc-project/swc' }
swc_ecma_minifier = { git = 'https://github.com/swc-project/swc' }
swc_ecma_parser = { git = 'https://github.com/swc-project/swc' }
swc_ecma_preset_env = { git = 'https://github.com/swc-project/swc' }
swc_ecma_quote = { git = 'https://github.com/swc-project/swc' }
swc_ecma_quote_macros = { git = 'https://github.com/swc-project/swc' }
swc_ecma_testing = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_base = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_classes = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_compat = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_macros = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_module = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_optimization = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_proposal = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_react = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_testing = { git = 'https://github.com/swc-project/swc' }
swc_ecma_transforms_typescript = { git = 'https://github.com/swc-project/swc' }
swc_ecma_usage_analyzer = { git = 'https://github.com/swc-project/swc' }
swc_ecma_utils = { git = 'https://github.com/swc-project/swc' }
swc_ecma_visit = { git = 'https://github.com/swc-project/swc' }
swc_ecmascript = { git = 'https://github.com/swc-project/swc' }
swc_eq_ignore_macros = { git = 'https://github.com/swc-project/swc' }
swc_error_reporters = { git = 'https://github.com/swc-project/swc' }
swc_estree_ast = { git = 'https://github.com/swc-project/swc' }
swc_estree_compat = { git = 'https://github.com/swc-project/swc' }
swc_fast_graph = { git = 'https://github.com/swc-project/swc' }
swc_fast_ts_strip = { git = 'https://github.com/swc-project/swc' }
swc_graph_analyzer = { git = 'https://github.com/swc-project/swc' }
swc_html = { git = 'https://github.com/swc-project/swc' }
swc_html_ast = { git = 'https://github.com/swc-project/swc' }
swc_html_codegen = { git = 'https://github.com/swc-project/swc' }
swc_html_codegen_macros = { git = 'https://github.com/swc-project/swc' }
swc_html_minifier = { git = 'https://github.com/swc-project/swc' }
swc_html_parser = { git = 'https://github.com/swc-project/swc' }
swc_html_utils = { git = 'https://github.com/swc-project/swc' }
swc_html_visit = { git = 'https://github.com/swc-project/swc' }
swc_macros_common = { git = 'https://github.com/swc-project/swc' }
swc_malloc = { git = 'https://github.com/swc-project/swc' }
swc_node_bundler = { git = 'https://github.com/swc-project/swc' }
swc_node_comments = { git = 'https://github.com/swc-project/swc' }
swc_nodejs_common = { git = 'https://github.com/swc-project/swc' }
swc_parallel = { git = 'https://github.com/swc-project/swc' }
swc_plugin = { git = 'https://github.com/swc-project/swc' }
swc_plugin_macro = { git = 'https://github.com/swc-project/swc' }
swc_plugin_proxy = { git = 'https://github.com/swc-project/swc' }
swc_plugin_runner = { git = 'https://github.com/swc-project/swc' }
swc_plugin_testing = { git = 'https://github.com/swc-project/swc' }
swc_timer = { git = 'https://github.com/swc-project/swc' }
swc_trace_macro = { git = 'https://github.com/swc-project/swc' }
swc_transform_common = { git = 'https://github.com/swc-project/swc' }
swc_typescript = { git = 'https://github.com/swc-project/swc' }
swc_visit = { git = 'https://github.com/swc-project/swc' }
swc_x_optimizer = { git = 'https://github.com/swc-project/swc' }
swc_xml = { git = 'https://github.com/swc-project/swc' }
swc_xml_ast = { git = 'https://github.com/swc-project/swc' }
swc_xml_codegen = { git = 'https://github.com/swc-project/swc' }
swc_xml_codegen_macros = { git = 'https://github.com/swc-project/swc' }
swc_xml_parser = { git = 'https://github.com/swc-project/swc' }
swc_xml_visit = { git = 'https://github.com/swc-project/swc' }
testing = { git = 'https://github.com/swc-project/swc' }
testing_macros = { git = 'https://github.com/swc-project/swc' }
